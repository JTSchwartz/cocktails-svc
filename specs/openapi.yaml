openapi: 3.1.0
info:
  title: Cocktails Service
  version: 1.0.0
paths:
  /api/v1/cocktails:
    get:
      tags:
        - Cocktails
      summary: Get cocktails
      operationId: getCocktails
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: ingredient
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CocktailPageResponse"
      x-spring-paginated: true
    post:
      tags:
        - Cocktails
      summary: Create cocktail
      operationId: createCocktail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CocktailCreateRequest"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CocktailResponse"
  /api/v1/cocktails/{name}:
    get:
      tags:
        - Cocktails
      summary: Get cocktail by name
      operationId: getCocktail
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CocktailResponse"
  /api/v1/cocktails/im-feeling-lucky:
    get:
      tags:
        - Cocktails
      summary: I'm feeling lucky
      operationId: getRandomCocktail
      parameters:
        - name: size
          in: query
          required: false
          schema:
            type: int
            default: 1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CocktailListResponse"
components:
  schemas:
    Unit:
      type: string
      enum:
        - OUNCE
        - MILLILITER
        - TEASPOON
        - TABLESPOON
        - DASH
        - CUP
        - GRAM
        - ITEM

    Cocktail:
      type: object
      properties:
        name:
          type: string
        instructions:
          type: string
        ingredients:
          type: array
          items:
            type: string
    CocktailResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Cocktail"
    CocktailListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Cocktail"
    CocktailPageResponse:
      type: object
      allOf:
        - $ref: 'https://api.swaggerhub.com/apis/spring/pagination/1.0.0#/components/schemas/PaginationResponse'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: "#/components/schemas/Cocktail"
              default: []
    CocktailCreateRequest:
      type: object
      properties:
        name:
          type: string
        instructions:
          type: string
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/Ingredient"
    Ingredient:
      type: object
      properties:
        name:
          type: string
          pattern: "[0-9A-Z].+"
          minLength: 2
          maxLength: 100
        amount:
          type: number
          minimum: 0
          exclusiveMinimum: true
          format: float
        unit:
          $ref: "#/components/schemas/Unit"