plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.protobuf' version '0.9.4'
    id "org.openapi.generator" version "7.10.0"
    id 'info.solidsoft.pitest' version '1.15.0'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version "3.4.4"
}

group = 'com.jtschwartz'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

compileJava.dependsOn tasks.openApiGenerate

openApiGenerate {
    generatorName.set("spring")

    inputSpec.set("$rootDir/specs/openapi.yaml")
    outputDir.set("$buildDir/generated")

    apiPackage.set("com.jtschwartz.cocktails.api.definition")
    invokerPackage.set("com.jtschwartz.cocktails.api.invoker")
    modelPackage.set("com.jtschwartz.cocktails.api.model")

    configOptions.put("documentationProvider", "none")
    configOptions.put("dateLibrary", "java8")
    configOptions.put("interfaceOnly", "true")
    configOptions.put("openApiNullable", "false")
    configOptions.put("useJakartaEe", "true")
    configOptions.put("useOptional", "true")
    configOptions.put("useResponseEntity", "false")

    importMappings.put("Unit", "com.jtschwartz.cocktails.constant.Unit")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    main {
        java {
            srcDir("$buildDir/generated")
        }
    }

    scenarios {
        java {
            srcDir("$buildDir/generated")
            srcDir file('src/scenarios/java')
        }
        resources {
            srcDir file('src/main/resources')
            srcDir file('src/scenarios/resources')
        }


        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    scenariosCompile.extendsFrom testCompile
    scenariosRuntime.extendsFrom testRuntime
    scenariosImplementation.extendsFrom testImplementation
}

tasks.named("processScenariosResources", ProcessResources) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudGcpVersion', "6.0.0")
    set('springCloudVersion', "2024.0.0")
    set('springGrpcVersion', "0.3.0")
}

dependencies {

    // Annotations
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.28'

    // Data
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.integration:spring-integration-mongodb'

    // GCP
//    implementation 'com.google.cloud:spring-cloud-gcp-starter'
//    implementation 'com.google.cloud:spring-cloud-gcp-starter-pubsub'

    // gRPC
    implementation 'io.grpc:grpc-services'
    implementation 'org.springframework.grpc:spring-grpc-spring-boot-starter'

    // Spring
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-integration'
    implementation 'org.springframework.integration:spring-integration-http'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springdoc:springdoc-openapi-starter-webflux-api:2.8.4'

    // Utils
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'org.modelmapper:modelmapper:3.2.2'

    // Test
//    testImplementation 'org.testcontainers:gcloud'
//    testImplementation 'org.testcontainers:mongodb'
//    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
//    testImplementation 'org.springframework.grpc:spring-grpc-test'
//    testImplementation 'org.springframework.integration:spring-integration-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


    // Integration Tests
    scenariosImplementation(platform("io.cucumber:cucumber-bom:7.20.1"))
    scenariosImplementation("io.cucumber:cucumber-java")
    scenariosImplementation("io.cucumber:cucumber-junit")
    scenariosImplementation("io.cucumber:cucumber-spring")
    scenariosImplementation("io.cucumber:cucumber-junit-platform-engine")
    scenariosImplementation("org.junit.platform:junit-platform-suite")
    scenariosImplementation("org.junit.jupiter:junit-jupiter")
}

dependencyManagement {
    imports {
        mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
        mavenBom "org.springframework.grpc:spring-grpc-dependencies:${springGrpcVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                option 'jakarta_omit'
                option '@generated=omit'
            }
        }
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()
    finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

jacocoTestReport {
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/test')
    }
}

pitest {
    junit5PluginVersion.set('1.2.1')
    pitestVersion.set('1.15.2')
    excludedClasses.set([
            'com.jtschwartz.cocktails.api.*',
            'com.jtschwartz.cocktails.config.*',
            'com.jtschwartz.cocktails.constant.*',
            'com.jtschwartz.cocktails.model.*',
    ])
    threads.set(4)
    outputFormats.set(['XML', 'HTML'])
    timestampedReports.set(false)
    useClasspathFile.set(true)

    mutationThreshold.set(95)
}

var testCoverage = files(sourceSets.main.output.classesDirs.files.collect {
    fileTree(dir: it, exclude: [
            'com/jtschwartz/cocktails/CocktailsSvcApplication*',
            'com/jtschwartz/cocktails/api/**/*',
            'com/jtschwartz/cocktails/config/*',
            'com/jtschwartz/cocktails/constant/*',
            'com/jtschwartz/cocktails/model/*',
    ])
})

jacocoTestReport {
    classDirectories = testCoverage
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.95
            }
        }
    }
    classDirectories = testCoverage
}

var scenariosCoverage = files(sourceSets.main.output.classesDirs.files.collect {
    fileTree(dir: it, exclude: 'com/jtschwartz/jtschwartz/CocktailsSrvApplication*')
})

tasks.register('jacocoScenariosReport', JacocoReport) {
    executionData = files("$buildDir/jacoco/scenarios.exec")
    reports {
        xml {
            required = true
            outputLocation = layout.buildDirectory.file('reports/jacoco/scenarios/jacocoScenariosReport.xml')
        }
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/scenarios')
    }

    // classDirectories = sourceSets.main.output.classesDirs
    classDirectories = scenariosCoverage
}

tasks.register('jacocoScenariosCoverageVerification', JacocoCoverageVerification) {
    executionData = files("$buildDir/jacoco/scenarios.exec")
    violationRules {
        rule {
            limit {
                minimum = 0.95
            }
        }
    }
    classDirectories = scenariosCoverage
}

tasks.register('scenarios', Test) {
    useJUnitPlatform()
    finalizedBy tasks.findByName("jacocoScenariosReport"), tasks.findByName("jacocoScenariosCoverageVerification")

    environment "SPRING_PROFILES_ACTIVE", "scenarios"

    testClassesDirs = sourceSets.scenarios.output.classesDirs
    classpath = sourceSets.scenarios.runtimeClasspath + sourceSets.main.output + sourceSets.test.output

    onlyIf {
        !(gradle.startParameter.taskNames.contains("pitest"))
    }
}

jib {
    to {
        image = "us-east1-docker.pkg.dev/web-apps-327720/cloud-run-source-deploy/cocktails-backend"
    }
    from {
        image = "eclipse-temurin:21-jre-noble"
    }
    container {
        ports = ['8080']
    }
}
